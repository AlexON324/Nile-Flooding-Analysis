from localLevelModel import LocalLevelModel
from scipy.optimize import minimize
import pandas as pd
import numpy as np
import time

class LlmOptimizer:
    def __init__(self, a1, P1, absoluteSigma=True, verbose=False):
        self.a1 = a1
        self.P1 = P1
        self.absoluteSigma = absoluteSigma
        self.verbose = verbose

    def CalculateLogLikelihood(self,sigmaGuesses, y):
        if self.verbose:
            start_time = time.time()

        if self.absoluteSigma:
            sigEps = abs(sigmaGuesses[0])
            sigEta = abs(sigmaGuesses[1])
        else:
            sigEps = sigmaGuesses[0]
            sigEta = sigmaGuesses[1]

        if self.verbose:
            print(str(sigEps) + ", " + str(sigEta))

        llm = LocalLevelModel(self.a1, self.P1, sigEps, sigEta)
        kalmanFilterResults = llm.CalculateKalmanFilterResults(y)
        
        n = len(kalmanFilterResults[['F']])
        sumTemp = 0
        
        for t in range (1,n,1):
            F = kalmanFilterResults[['F']].iat[t,0]
            v = kalmanFilterResults[['v']].iat[t,0]
                    
            sumTemp += np.log(F) + (v**2)/F
        
        logL = -(n/2)*np.log(2*np.pi) - (1/2)*sumTemp + (n/2)*np.log(2*np.pi) + (n-1)/2
        
        if self.verbose:
            print("LogLikelihood:" + str(logL))
            print("--- %s seconds for attempt---" % (time.time() - start_time))

        return -logL

    def OptimizeSigmas(self, guesses, y, method, options):
        if self.verbose:
            start_time = time.time()

        results = minimize(self.CalculateLogLikelihood, x0 = guesses, args = (y), method = method,options =options)

        if self.verbose:
            print("--- %s seconds to complete maximisation---" % (time.time() - start_time))

        if not results.success:
            raise ValueError('Model could not be optimized!') 
            
        return results

    def ReturnOptimizedLlm(self, guesses, y, method, options):
        optimizedResults = self.OptimizeSigmas(guesses, y, method, options)
        optimizedVariances = optimizedResults.x

        optimizedLlm = LocalLevelModel(self.a1, self.P1, optimizedVariances[0], optimizedVariances[1])

        return optimizedLlm
